#include "lists.h"

/**
 * add_dnodeint - adds a new node at the beginning of a dlistint_t list
 * @head: head of linked list
 * @n: data of new node
 * Return: new node added otherwise NULL
 */

dlistint_t *add_dnodeint(dlistint_t **head, const int n)
{
	dlistint_t *n_node;

	n_node = (dlistint_t *)malloc(sizeof(dlistint_t));
	if (!n_node)
		return (NULL);

	n_node->n = n;
	n_node->prev = NULL;
	n_node->next = *head;

	if (*head)
		(*head)->prev = n_node;

	*head = n_node;

	return (n_node);
}
#include "lists.h"

/**
 * add_dnodeint_end - adds a new node at the end of a dlistint_t list.
 * @head: head of lonked list
 * @n: data of linked list
 * Return: the added node otherwsie NULL
 */

dlistint_t *add_dnodeint_end(dlistint_t **head, const int n)
{
	dlistint_t *n_node, *tmp;

	n_node = (dlistint_t *)malloc(sizeof(dlistint_t));
	if (!n_node)
		return (NULL);

	if (!(*head))
	{
		n_node->n = n;
		n_node->prev = NULL;
		n_node->next = NULL;
		*head = n_node;
		return (n_node);
	}

	tmp = *head;

	while (tmp->next)
	{
		tmp = tmp->next;
	}
	n_node->n = n;
	n_node->prev = tmp;
	tmp->next = n_node;

	return (n_node);
}
#include "lists.h"

/**
 * insert_dnodeint_at_index - it insert the node at specified index
 * @idx: index
 * @h: head of linked list
 * @n: node data
 * Return: an inserted node or NULL
 */

dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
	dlistint_t *tmp, *cur, *n_node;
	size_t count = 0;

	if (!(*h) || idx == 0)
		return (add_dnodeint(h, n));

	n_node = (dlistint_t *)malloc(sizeof(dlistint_t));
	if (!n_node)
		return (NULL);
	n_node->n = n;

	cur = *h;

	while (cur)
	{
		count++;
		if (idx - 1 == count)
		{
			tmp = cur->next;
			cur->next = n_node;
			n_node->prev = cur;
			n_node->next = tmp;
			if (tmp)
				tmp->prev = n_node;
			return (n_node);
		}
		cur = cur->next;
	}
	if (count == idx)
		return (add_dnodeint_end(h, n));

	return (NULL);
}
